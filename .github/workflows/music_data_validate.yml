name: Validate music data

on:
  pull_request:
    branches:
      - main
    paths:
      - "music_data/data/music/**"
      - "music_data/data/input/**"
    types: [opened, synchronize, reopened]

jobs:
  build_and_test:
    uses: ./.github/workflows/musictl.yml

  validate:
    needs: build_and_test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: music_data
    env:
      RUST_BACKTRACE: 1
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50

      - name: Detect changed files
        id: changes
        run: |
          BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          HEAD_COMMIT="${{ github.sha }}"
          INPUT_CHANGED_FILES=$(git diff --name-only $BASE_COMMIT $HEAD_COMMIT | grep '^music_data/data/input' | sed 's|^|./|' || true)
          INPUT_CHANGED_FILES=$(echo "$INPUT_CHANGED_FILES" | xargs)
          MUSIC_CHANGED_FILES=$(git diff --name-only $BASE_COMMIT $HEAD_COMMIT | grep '^music_data/data/music' | sed 's|^|./|' || true)
          MUSIC_CHANGED_FILES=$(echo "$MUSIC_CHANGED_FILES" | xargs)
          MUSIC_MIN_CHANGED_FILES=$(git diff --name-only $BASE_COMMIT $HEAD_COMMIT | grep '^public/music_data/.*\.json$' | sed 's|^|./|' || true)
          MUSIC_MIN_CHANGED_FILES=$(echo "$MUSIC_MIN_CHANGED_FILES" | xargs)

          echo "input_changed_files=$INPUT_CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "music_changed_files=$MUSIC_CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "music_min_changed_files=$MUSIC_MIN_CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Detect changed type
        id: changed_type
        run: |
          INPUT_CHANGED_FILES="${{ steps.changes.outputs.input_changed_files }}"
          MUSIC_CHANGED_FILES="${{ steps.changes.outputs.music_changed_files }}"
          MUSIC_MIN_CHANGED_FILES="${{ steps.changes.outputs.music_min_changed_files }}"

          if [ -n "$MUSIC_MIN_CHANGED_FILES" ]; then
            # music関連のminファイルが変更されている場合はスキップ
            echo "Push includes music-related min files. Skipping workflow."
            SKIP_WORKFLOW=true
          elif [ -n "$INPUT_CHANGED_FILES" ] && [ -z "$MUSIC_CHANGED_FILES" ]; then
            # inputのみ変更
            echo "changed_type=INPUT" >> $GITHUB_OUTPUT
            echo "input_changed_files=$INPUT_CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "changed_type has been set to INPUT (input files were changed: $INPUT_CHANGED_FILES)"
          elif [ -z "$INPUT_CHANGED_FILES" ] && [ -n "$MUSIC_CHANGED_FILES" ]; then
            # musicのみ変更
            echo "changed_type=UPDATE" >> $GITHUB_OUTPUT
            echo "music_changed_files=$MUSIC_CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "changed_type has been set to UPDATE (music files were changed: $MUSIC_CHANGED_FILES)"
          elif [ -n "$INPUT_CHANGED_FILES" ] && [ -n "$MUSIC_CHANGED_FILES" ]; then
            # inputもmusicも変更
            echo "changed_type=BOTH" >> $GITHUB_OUTPUT
            echo "input_changed_files=$INPUT_CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "music_changed_files=$MUSIC_CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "changed_type has been set to BOTH (input and music files were changed: $INPUT_CHANGED_FILES, $MUSIC_CHANGED_FILES)"
          else
            # 該当ファイルなし
            echo "changed_type=NONE" >> $GITHUB_OUTPUT
            echo "changed_type has been set to NONE (no input or music files were changed)"
            SKIP_WORKFLOW=true
          fi
          echo "skip_workflow=$SKIP_WORKFLOW" >> $GITHUB_OUTPUT

      - name: Download musictl binary
        uses: actions/download-artifact@v4
        with:
          name: musictl-binary
          path: ./bin

      - name: Make musictl executable
        run: |
          chmod +x ../bin/musictl
          ls -lR ../bin

      - name: Validate input
        if: steps.changed_type.outputs.changed_type == 'INPUT'
        run: |
          ../bin/musictl validate new -i "${{ steps.changes.outputs.input_changed_files }}" --file-tracing-level debug

      - name: Validate update
        if: steps.changed_type.outputs.changed_type == 'UPDATE'
        run: ../bin/musictl validate update --file-tracing-level debug

      - name: Validate input & update
        if: steps.changed_type.outputs.changed_type == 'BOTH'
        run: |
          ../bin/musictl validate new -i "${{ steps.changes.outputs.input_changed_files }}" --file-tracing-level debug
          ../bin/musictl validate update --file-tracing-level debug

      - name: Post logs
        if: always()
        run: ../tools/musictl_logs_to_stdout.sh
