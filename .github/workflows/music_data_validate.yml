name: Validate music data

on:
  pull_request:
    branches:
      - main
    paths:
      - "music_data/data/music/**"
      - "music_data/data/input/**"
    types: [opened, synchronize, reopened]

jobs:
  build_and_test:
    uses: ./.github/workflows/musictl.yml

  validate:
    needs: build_and_test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: music_data
    env:
      RUST_BACKTRACE: 1
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # botは楽曲追加/編集を適用するPRを送るのでvalidateする必要はない
      - name: Skip if PR author is a bot
        if: github.event.pull_request.user.type == 'Bot'
        run: |
          echo "PR author is a bot. Skipping workflow."
          exit 0

      - name: Detect changed files
        id: changed
        run: |
          INPUT_CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '^data/input' || true)
          MUSIC_CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '^data/music' || true)

          INPUT_CHANGED_FILES_CLEAN=$(echo "$INPUT_CHANGED_FILES" | tr '\n' ' ')
          MUSIC_CHANGED_FILES_CLEAN=$(echo "$MUSIC_CHANGED_FILES" | tr '\n' ' ')

          if [ -n "$INPUT_CHANGED_FILES_CLEAN" ] && [ -z "$MUSIC_CHANGED_FILES_CLEAN" ]; then
            # inputのみ変更
            echo "changed_type=INPUT" >> $GITHUB_OUTPUT
            echo "input_changed_files=$INPUT_CHANGED_FILES_CLEAN" >> $GITHUB_OUTPUT
            echo "changed_type has been set to INPUT (input files were changed: $INPUT_CHANGED_FILES_CLEAN)"
          elif [ -z "$INPUT_CHANGED_FILES_CLEAN" ] && [ -n "$MUSIC_CHANGED_FILES_CLEAN" ]; then
            # musicのみ変更
            echo "changed_type=UPDATE" >> $GITHUB_OUTPUT
            echo "music_changed_files=$MUSIC_CHANGED_FILES_CLEAN" >> $GITHUB_OUTPUT
            echo "changed_type has been set to UPDATE (music files were changed: $MUSIC_CHANGED_FILES_CLEAN)"
          elif [ -n "$INPUT_CHANGED_FILES_CLEAN" ] && [ -n "$MUSIC_CHANGED_FILES_CLEAN" ]; then
            # inputもmusicも変更
            echo "changed_type=BOTH" >> $GITHUB_OUTPUT
            echo "input_changed_files=$INPUT_CHANGED_FILES_CLEAN" >> $GITHUB_OUTPUT
            echo "music_changed_files=$MUSIC_CHANGED_FILES_CLEAN" >> $GITHUB_OUTPUT
            echo "changed_type has been set to BOTH (input and music files were changed: $INPUT_CHANGED_FILES_CLEAN, $MUSIC_CHANGED_FILES_CLEAN)"
          else
            # 該当ファイルなし
            echo "changed_type=NONE" >> $GITHUB_OUTPUT
            echo "changed_type has been set to NONE (no input or music files were changed)"
            exit 0
          fi

      - name: Download musictl binary
        uses: actions/download-artifact@v4
        with:
          name: musictl-binary
          path: ./bin

      - name: Make musictl executable
        run: |
          chmod +x ../bin/musictl
          ls -lR ../bin

      - name: Validate input
        if: steps.changed.outputs.changed_type == 'INPUT'
        run: ../bin/musictl validate input -i ${{ steps.changed.outputs.input_changed_files }} --file-tracing-level debug

      - name: Validate update
        if: steps.changed.outputs.changed_type == 'UPDATE'
        run: ../bin/musictl validate update --file-tracing-level debug

      - name: Validate input & update
        if: steps.changed.outputs.changed_type == 'BOTH'
        run: |
          ../bin/musictl validate input -i "${{ steps.changed.outputs.input_changed_files }}" --file-tracing-level debug
          ../bin/musictl validate update --file-tracing-level debug

      - name: Post logs
        if: always()
        run: ../tools/musictl_logs_to_stdout.sh
